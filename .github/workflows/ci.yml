name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AZURE_RESOURCE_GROUP: RecoFlixResourceGroup
  AZURE_WEBAPP_NAME: recoflix-app-yomna
  AZURE_ACR_NAME: recoflixacryomna
  DOCKER_IMAGE_NAME: recoflix-app
  DOCKER_IMAGE_TAG: latest
  PORT: 5000 # Le port sur lequel votre application Flask/Gunicorn écoute

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # --- Étape de débogage : Lister le contenu du répertoire ---
      # Cette étape est cruciale pour comprendre la structure des fichiers vue par la pipeline.
      # Laissez-la active pour le prochain run pour vérifier les chemins.
      - name: Debug - List repository contents
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing contents of current directory:"
          ls -R .
          echo "--- End of directory listing ---"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        # Exécute cette étape depuis le répertoire où se trouve requirements.txt
        # Si votre Dockerfile est à la racine du dépôt, et requirements.txt aussi,
        # alors working-directory n'est pas nécessaire ici, ou il devrait être '.'
        # Si votre Flask app est dans un sous-dossier 'mon_flask_app', et requirements.txt est DANS ce sous-dossier,
        # alors working-directory: mon_flask_app/ est correct.
        working-directory: . # Assumons que requirements.txt est à la racine du dépôt cloné
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Flask test
        # Exécute cette étape depuis le répertoire où se trouve wsgi.py
        # Si wsgi.py est à la racine du dépôt, working-directory: . est correct.
        # Si wsgi.py est dans un sous-dossier 'mon_flask_app', working-directory: mon_flask_app/ est correct.
        working-directory: . # Assumons que wsgi.py est à la racine du dépôt cloné
        run: |
          python wsgi.py & # Lance wsgi.py directement
          sleep 5
          curl -f http://localhost:${{ env.PORT }} || exit 1

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.AZURE_ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Docker Image to ACR
        # Le contexte de build (le '.') doit pointer vers le dossier contenant le Dockerfile.
        # Si Dockerfile est à la racine du dépôt, alors '.' est correct.
        # Si Dockerfile est dans 'mon_flask_app/', alors 'mon_flask_app/' est le contexte.
        run: |
          docker build . -t ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
          docker push ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          resource-group-name: ${{ env.AZURE_RESOURCE_GROUP }} # Correction du nom du paramètre
          images: '${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}'
